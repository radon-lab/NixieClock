/*
  Arduino IDE 1.8.13 –≤–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏ 1.1.6 —Ä–µ–ª–∏–∑ –æ—Ç 16.12.24
  –°–ø–µ—Ü–∏–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∞—Å—ã –Ω–∞ –ì–†–ò. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ—à–∏–≤–∫–∞"
  –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Ñ–æ—Ä—É–º–µ - https://community.alexgyver.ru/threads/chasy-na-gri-alternativnaja-proshivka.5843/

  –ò—Å—Ö–æ–¥–Ω–∏–∫ - https://github.com/radon-lab/NixieClock
  –ê–≤—Ç–æ—Ä Radon-lab

  –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–¥—Ä–æ ESP8266, "–§–∞–π–ª -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞—Ç", –≤ –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å—Å—ã–ª–∫—É - https://arduino.esp8266.com/stable/package_esp8266com_index.json
  –î–∞–ª–µ–µ "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã -> –ü–ª–∞—Ç–∞ -> –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞—Ç..." –Ω–∞—Ö–æ–¥–∏—Ç–µ –ø–ª–∞—Ç—É esp8266 –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ –≤–µ—Ä—Å–∏—é 2.7.4!

  –í "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã -> –£–ø—Ä–∞–≤–ª—è—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏..." –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫:
  GyverPortal 3.6.6
  EEManager 2.0.1

  –í "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã -> Flash Size" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ FLASH:
  1–ú–ë - FS:64KB OTA:~470KB(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ esp –ø–æ OTA).
  2–ú–ë - FS:1MB OTA:~512KB(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ esp –ø–æ OTA).
  4–ú–ë - FS:2MB OTA:~1019KB(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ esp –ø–æ OTA).
  8–ú–ë - FS:6MB OTA:~1019KB(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ esp –ø–æ OTA).
*/
#include "config.h"

#define GP_NO_DNS
#define GP_NO_MDNS

#include <GyverPortal.h>
GyverPortal ui;

struct settingsData {
  uint8_t sensor;
  uint8_t period;
  char ssid[64];
  char pass[64];
  uint8_t attempt[MAX_CLOCK];
  IPAddress send[MAX_CLOCK];
} settings;

#include <EEManager.h>
EEManager memory(settings, 3000);

#include <WiFiUdp.h>
WiFiUDP udp;

//–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
char buffSendIp[20]; //–±—É—Ñ–µ—Ä ip –∞–¥—Ä–µ—Å–∞
uint8_t buffSendAttempt; //–±—É—Ñ–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
uint8_t buffSendData[UDP_SEND_SIZE]; //–±—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏

uint32_t rtcMemory[9]; //–ø–∞–º—è—Ç—å –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞

boolean sendAnswerWait = false; //—Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ö–æ—Å—Ç–∞
uint8_t sendHostNum = 0; //—Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ö–æ—Å—Ç–∞
uint8_t sendHostAttempt = 0; //—Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–∞
uint32_t sendAnswerTimer = 0; //—Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ö–æ—Å—Ç–∞

boolean otaUpdate = true; //—Ñ–ª–∞–≥ –∑–∞–ø—Ä–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ø
boolean settingsMode = false; //—Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–Ω—Å–æ—Ä–∞

boolean sensorReady = false; //—Ñ–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–º–µ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
uint8_t sensorStartWait = 0; //–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

uint16_t vccVoltage = 0; //–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è

const uint8_t sleepTime[] = {1, 5, 10, 15, 30, 60};
const char sleepTimeList[] = "–ö–∞–∂–¥—É—é 1 –º–∏–Ω,–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω,–ö–∞–∂–¥—ã–µ 10 –º–∏–Ω,–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω,–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω,–ö–∞–∂–¥—ã–π 1 —á–∞—Å";

//—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
struct sensorData {
  int16_t temp = 0x7FFF; //—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
  uint16_t press = 0; //–¥–∞–≤–ª–µ–Ω–∏–µ
  uint8_t hum = 0; //–≤–ª–∞–∂–Ω–æ—Å—Ç—å
} sens;

enum {
  SENS_DHT,
  SENS_DS,
  SENS_BME,
  SENS_SHT,
  SENS_AHT,
  SENS_MAX
};

const char *tempSensList[] = {"DHT", "DS18B20", "BMP/BME", "SHT", "AHT"};

#define REG_READ(reg) (*(volatile uint32*)(reg))

#define WIFI_SETTINGS ((uint8_t*)&rtcMemory[2])
#define WIFI_LOCAL_IP ((uint8_t*)&rtcMemory[4])
#define WIFI_GATEWAY_IP ((uint8_t*)&rtcMemory[5])
#define WIFI_SUBNET_MASK ((uint8_t*)&rtcMemory[6])
#define WIFI_DNS_1 ((uint8_t*)&rtcMemory[7])
#define WIFI_DNS_2 ((uint8_t*)&rtcMemory[8])

#if (LED_BUILTIN == TWI_SDA_PIN) || (LED_BUILTIN == TWI_SCL_PIN)
#undef STATUS_LED
#define STATUS_LED -1
#endif

#include "WIRE.h"
#include "AHT.h"
#include "SHT.h"
#include "BME.h"
#include "DHT.h"
#include "DS.h"

#include "WIFI.h"
#include "PING.h"
#include "utils.h"

ADC_MODE(ADC_VCC);

void build(void) {
  GP.BUILD_BEGIN(UI_MAIN_THEME, 500);
  GP_FIX_SCRIPTS(); //—Ñ–∏–∫—Å —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω–∞
  GP_FIX_STYLES(); //—Ñ–∏–∫—Å —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

  //–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
  String updateList = "barBat";

  //–Ω–∞—á–∞—Ç—å –º–µ–Ω—é
  GP.UI_MENU("Wireless Sensor", UI_MENU_COLOR);

  //—Å—Å—ã–ª–∫–∏ –º–µ–Ω—é
  GP.UI_LINK("/", "–û–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ");
  if (otaUpdate) GP.UI_LINK("/update", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û");
  GP.UI_LINK("/network", "–°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");

  GP_HR(UI_MENU_LINE_COLOR, 6);

  //—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  if (wifiGetConnectStatus()) {
    updateList += ",bar_wifi";
    GP_BLOCK_SHADOW_BEGIN();
    GP.LABEL("–°–∏–≥–Ω–∞–ª WiFi", "", UI_MENU_TEXT_COLOR, 15);
    GP_LINE_BAR("bar_wifi", getWiFiSignal(), 0, 100, 1, UI_MENU_WIFI_COLOR);
    GP_BLOCK_SHADOW_END();
  }

  GP_FOOTER_BEGIN();
  GP.HR(UI_MENU_LINE_COLOR);
  GP_TEXT_LINK("https://github.com/radon-lab/", "@radon_lab", "user", "#bbb");
  GP.BREAK();
  GP_TEXT_LINK("https://community.alexgyver.ru/threads/chasy-na-gri-v2-alternativnaja-proshivka.5843/", "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä—É–º–µ", "forum", "#e67b09");
  GP_FOOTER_END();

  GP.UI_BODY(); //–Ω–∞—á–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ

  GP.BOX_BEGIN(GP_JUSTIFY, "auto;padding-left:2%;padding-right:2%");
  GP.LABEL_BLOCK(getBatteryState(), "barBat", UI_BAR_BATTERY_COLOR, 18, 1);

  GP.BOX_BEGIN(GP_RIGHT, "100%");
  if (settings.sensor) {
    if (sens.temp != 0x7FFF) {
      updateList += ",barTemp";
      GP.LABEL_BLOCK(String(sens.temp / 10.0, 1) + "¬∞–°", "barTemp", UI_BAR_TEMP_COLOR, 18, 1);
    }
    if (sens.hum) {
      updateList += ",barHum";
      GP.LABEL_BLOCK(String(sens.hum) + "%", "barHum", UI_BAR_HUM_COLOR, 18, 1);
    }
    if (sens.press) {
      updateList += ",barPress";
      GP.LABEL_BLOCK(String(sens.press) + "mm.Hg", "barPress", UI_BAR_PRESS_COLOR, 18, 1);
    }
  }
  else {
    GP.LABEL_BLOCK("-.-¬∞–°", "barTemp", UI_BAR_TEMP_COLOR, 18, 1);
  }
  GP.BOX_END();

  GP.BOX_END();
  GP.HR(UI_BAR_LINE_COLOR);

  if (ui.uri("/")) { //–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    GP.PAGE_TITLE("–û–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ");

    GP.BLOCK_BEGIN(GP_THIN, "", "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", UI_BLOCK_COLOR);
    M_BOX(GP.LABEL("–£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞", "", UI_LABEL_COLOR); GP.LABEL("üì∂ " + String(getWiFiSignal()) + '%', "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("–†–µ–∂–∏–º –º–æ–¥–µ–º–∞", "", UI_LABEL_COLOR); GP.LABEL(WiFi.getMode() == WIFI_AP ? "AP" : (WiFi.getMode() == WIFI_STA ? "STA" : "AP_STA"), "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("MAC –∞–¥—Ä–µ—Å", "", UI_LABEL_COLOR); GP.LABEL(WiFi.macAddress(), "", UI_INFO_COLOR););

    if (wifiGetConnectStatus()) {
      M_BOX(GP.LABEL("–ú–∞—Å–∫–∞ –ø–æ–¥—Å–µ—Ç–∏", "", UI_LABEL_COLOR); GP.LABEL(WiFi.subnetMask().toString(), "", UI_INFO_COLOR););
      M_BOX(GP.LABEL("–®–ª—é–∑", "", UI_LABEL_COLOR); GP.LABEL(WiFi.gatewayIP().toString(), "", UI_INFO_COLOR););
      M_BOX(GP.LABEL("SSID —Å–µ—Ç–∏", "", UI_LABEL_COLOR); GP.LABEL(strLengthConstrain(WiFi.SSID(), 12), "", UI_INFO_COLOR););
      M_BOX(GP.LABEL("IP —Å–µ—Ç–∏", "", UI_LABEL_COLOR); GP.LABEL(WiFi.localIP().toString(), "", UI_INFO_COLOR););
    }
    if (WiFi.getMode() != WIFI_STA) {
      M_BOX(GP.LABEL("SSID —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞", "", UI_LABEL_COLOR); GP.LABEL(strLengthConstrain(AP_SSID, 12), "", UI_INFO_COLOR););
      M_BOX(GP.LABEL("IP —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞", "", UI_LABEL_COLOR); GP.LABEL(WiFi.softAPIP().toString(), "", UI_INFO_COLOR););
    }

    GP.BREAK();
    GP_HR_TEXT("–ü–∞–º—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "", UI_LINE_COLOR, UI_HINT_COLOR);

    M_BOX(GP.LABEL("–§—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ(Heap)", "", UI_LABEL_COLOR); GP.LABEL(String(ESP.getHeapFragmentation()) + '%', "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("–°–≤–æ–±–æ–¥–Ω–æ(Heap)", "", UI_LABEL_COLOR); GP.LABEL(String(ESP.getFreeHeap() / 1000.0, 3) + " kB", "", UI_INFO_COLOR););

    M_BOX(GP.LABEL("–í—Å–µ–≥–æ(Flash)", "", UI_LABEL_COLOR); GP.LABEL(String(ESP.getFlashChipSize() / 1000.0, 1) + " kB", "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("–ó–∞–Ω—è—Ç–æ(Flash)", "", UI_LABEL_COLOR); GP.LABEL(String(ESP.getSketchSize() / 1000.0, 1) + " kB", "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("–°–≤–æ–±–æ–¥–Ω–æ(Flash)", "", UI_LABEL_COLOR); GP.LABEL(String(ESP.getFreeSketchSpace() / 1000.0, 1) + " kB", "", UI_INFO_COLOR););

    GP.BREAK();
    GP_HR_TEXT("–û —Å–∏—Å—Ç–µ–º–µ", "", UI_LINE_COLOR, UI_HINT_COLOR);

    M_BOX(GP.LABEL("ID —á–∏–ø–∞", "", UI_LABEL_COLOR); GP.LABEL("0x" + String(ESP.getChipId(), HEX), "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è", "", UI_LABEL_COLOR); GP.LABEL(String(getBatteryVoltage(), 2) + " V", "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞", "", UI_LABEL_COLOR); GP.LABEL(String(ESP.getCpuFreqMHz()) + " MHz", "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("–¶–∏–∫–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É", "", UI_LABEL_COLOR); GP.LABEL(String(ESP.getCycleCount()), "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", "", UI_LABEL_COLOR); GP.LABEL(getTimeFromMs(millis()), "", UI_INFO_COLOR););

    GP.BREAK();
    GP_HR_TEXT("–í–µ—Ä—Å–∏—è –ü–û", "", UI_LINE_COLOR, UI_HINT_COLOR);

    M_BOX(GP.LABEL("UID", "", UI_LABEL_COLOR); GP.LABEL(getSensorId(), "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("SDK", "", UI_LABEL_COLOR); GP.LABEL(ESP.getSdkVersion(), "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("CORE", "", UI_LABEL_COLOR); GP.LABEL(ESP.getCoreVersion(), "", UI_INFO_COLOR););
    M_BOX(GP.LABEL("GyverPortal", "", UI_LABEL_COLOR); GP.LABEL(GP_VERSION, "", UI_INFO_COLOR););

    M_BOX(GP.LABEL("–ü—Ä–æ—à–∏–≤–∫–∞ ESP", "", UI_LABEL_COLOR); GP.LABEL(ESP_FIRMWARE_VERSION, "", UI_INFO_COLOR););
    GP.BLOCK_END();

    String sensorsList = "";

    GP.BLOCK_BEGIN(GP_THIN, "", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç—á–∏–∫–µ", UI_BLOCK_COLOR);
    for (uint8_t i = 0; i < SENS_MAX; i++) {
      if (settings.sensor & (0x01 << i)) {
        if (sensorsList[0] != '\0') sensorsList += '+';
        sensorsList += tempSensList[i];
      }
    }
    M_BOX(GP.LABEL("–î–∞—Ç—á–∏–∫", "", UI_LABEL_COLOR); GP.NUMBER("", (sensorsList[0] == '\0') ? "–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç" : sensorsList, INT32_MAX, "", true););
    M_BOX(GP.LABEL("–ò–Ω—Ç–µ—Ä–≤–∞–ª", "", UI_LABEL_COLOR); GP.SELECT("extPeriod", sleepTimeList, settings.period););
    GP.BLOCK_END();
  }
  else if (ui.uri("/update") && otaUpdate) { //–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ESP
    GP.PAGE_TITLE("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ");

    GP.BLOCK_BEGIN(GP_THIN, "", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏", UI_BLOCK_COLOR);
    GP.SPAN("–ü—Ä–æ—à–∏–≤–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ Arduino IDE: –°–∫–µ—Ç—á -> –≠–∫—Å–ø–æ—Ä—Ç –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–ø–∫—É —Å –ø—Ä–æ—à–∏–≤–∫–æ–π).", GP_CENTER, "", UI_INFO_COLOR); //–æ–ø–∏—Å–∞–Ω–∏–µ
    GP.BREAK();
    GP.SPAN("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤: bin –∏ bin.gz.", GP_CENTER, "", UI_INFO_COLOR); //–æ–ø–∏—Å–∞–Ω–∏–µ
    GP.BREAK();
    GP_HR_TEXT("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", "", UI_LINE_COLOR, UI_HINT_COLOR);
    M_BOX(GP.LABEL("–ü—Ä–æ—à–∏–≤–∫–∞ ESP", "", UI_LABEL_COLOR); GP.OTA_FIRMWARE("", UI_BUTTON_COLOR, true););
    GP.BLOCK_END();
  }
  else { //–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–æ—É—Ç–µ—Ä—É
    GP.PAGE_TITLE("–°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");

    GP.BLOCK_BEGIN(GP_THIN, "", "–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å WIFI", UI_BLOCK_COLOR);
    if (wifiGetConnectStatus() || wifiGetConnectWaitStatus()) {
      GP.FORM_BEGIN("/network");
      if (wifiGetConnectStatus()) {
        GP.TEXT("", "", settings.ssid, "", 0, "", true);
        GP.BREAK();
        GP.TEXT("", "", WiFi.localIP().toString(), "", 0, "", true);
        GP.SPAN("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", GP_CENTER, "", UI_INFO_COLOR); //–æ–ø–∏—Å–∞–Ω–∏–µ
      }
      else {
        GP.SPAN(wifiGetConnectState(), GP_CENTER, "syncNetwork", UI_INFO_COLOR); //–æ–ø–∏—Å–∞–Ω–∏–µ
        updateList += ",syncNetwork";
      }

      GP.HR(UI_LINE_COLOR);
      if (ui.uri("/connection")) {
        GP.BUTTON_LINK("/", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", UI_BUTTON_COLOR);
      }
      else {
        GP.SUBMIT("–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", UI_BUTTON_COLOR);
      }
      GP.FORM_END();
    }
    else {
      if (wifiGetScanCompleteStatus()) wifiResetScanCompleteStatus();

      updateList += ",syncReload";
      GP.RELOAD("syncReload");

      GP.FORM_BEGIN("/connection");
      if (ui.uri("/manual")) {
        GP.TEXT("wifiSsid", "SSID", settings.ssid, "", 64);
        GP.BREAK();
        GP.PASS_EYE("wifiPass", "–ü–∞—Ä–æ–ª—å", settings.pass, "100%", 64);
        GP.BREAK();
        GP_TEXT_LINK("/network", "–°–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π", "net", UI_LINK_COLOR);
        GP.HR(UI_LINE_COLOR);
        GP.SEND("<div style='max-width:300px;justify-content:center' class='inliner'>\n");
        GP.SUBMIT("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", UI_BUTTON_COLOR);
        GP.BUTTON("extClear", "‚úï", "", (!settings.ssid[0] && !settings.pass[0]) ? GP_GRAY : UI_BUTTON_COLOR, "65px", (boolean)(!settings.ssid[0] && !settings.pass[0]), true);
        GP.SEND("</div>\n");
      }
      else {
        GP.SELECT("wifiNetwork", wifi_scan_list, 0, 0, wifiGetScanFoundStatus());
        GP.BREAK();
        GP.PASS_EYE("wifiPass", "–ü–∞—Ä–æ–ª—å", settings.pass, "100%", 64);
        GP.BREAK();
        GP_TEXT_LINK("/manual", "–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º", "net", UI_LINK_COLOR);
        GP.HR(UI_LINE_COLOR);
        GP.SEND("<div style='max-width:300px;justify-content:center' class='inliner'>\n");
        if (wifiGetScanFoundStatus()) GP.BUTTON("", "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", "", GP_GRAY, "", true);
        else GP.SUBMIT("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", UI_BUTTON_COLOR);
        GP.BUTTON("extScan", "<big><big>‚Üª</big></big>", "", UI_BUTTON_COLOR, "65px", false, true);
        GP.SEND("</div>\n");
      }
      GP.FORM_END();
    }
    GP.BLOCK_END();

    if (ui.uri("/network") && wifiGetConnectStatus()) { //—Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      GP.BLOCK_BEGIN(GP_THIN, "", "–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö", UI_BLOCK_COLOR);

      IPAddress addrSend;
      for (uint8_t i = 0; i < MAX_CLOCK; i++) {
        if (i) {
          GP.HR(UI_MENU_LINE_COLOR);
        }
        addrSend = settings.send[i];
        if (addrSend) {
          M_BOX(
            M_BOX(GP_LEFT, GP.TEXT("", "IP –∞–¥—Ä–µ—Å", addrSend.toString(), "", 20, "", true); GP.TEXT("", "", String("–ü–æ–ø—ã—Ç–æ–∫: ") + settings.attempt[i], "", 20, "", true););
            GP.BUTTON_MINI(String("extSendDel/") + i, "–£–¥–∞–ª–∏—Ç—å", "", UI_BUTTON_COLOR, "115px!important", false, true);
          );
        }
        else {
          M_BOX(
            M_BOX(GP_LEFT, GP.TEXT("extSendIp", "IP –∞–¥—Ä–µ—Å", "", "", 15); GP.NUMBER("extSendAttempt", "–ü–æ–ø—ã—Ç–æ–∫", INT32_MAX, "", false););
            GP.BUTTON_MINI("extSendAdd", "–î–æ–±–∞–≤–∏—Ç—å", "", UI_BUTTON_COLOR, "115px!important", false, true);
          );
          buffSendIp[0] = '\0';
          buffSendAttempt = 1;
          break;
        }
      }
      GP.BLOCK_END();
    }
  }

  GP.UPDATE(updateList);
  GP.UI_END(); //–∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–∫–Ω–æ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

  GP_BUILD_END();
}

void buildUpdater(bool UpdateEnd, const String & UpdateError) {
  GP.BUILD_BEGIN(UI_MAIN_THEME, 500);
  GP_FIX_SCRIPTS(); //—Ñ–∏–∫—Å —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω–∞
  GP_FIX_STYLES(); //—Ñ–∏–∫—Å —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

  GP.PAGE_TITLE("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ");

  GP.BLOCK_BEGIN(GP_THIN, "", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏", UI_BLOCK_COLOR);
  if (!UpdateEnd) {
    GP.SPAN("<b>–ü—Ä–æ—à–∏–≤–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ Arduino IDE: –°–∫–µ—Ç—á -> –≠–∫—Å–ø–æ—Ä—Ç –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–ø–∫—É —Å –ø—Ä–æ—à–∏–≤–∫–æ–π).</b><br>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ bin –∏ bin.gz.", GP_CENTER, "", UI_INFO_COLOR); //–æ–ø–∏—Å–∞–Ω–∏–µ
    GP.HR(UI_LINE_COLOR);
    M_BOX(GP_CENTER, GP.OTA_FIRMWARE("", UI_BUTTON_COLOR, true); GP.BUTTON_MINI_LINK("/", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", UI_BUTTON_COLOR););
  }
  else if (UpdateError.length()) {
    GP.SPAN("<big><b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏...</b></big><br><small>[" + UpdateError + "]</small>", GP_CENTER, "", GP_RED); //–æ–ø–∏—Å–∞–Ω–∏–µ
    GP.HR(UI_LINE_COLOR);
    M_BOX(GP_CENTER, GP_BUTTON_MINI_LINK("/ota_update", "‚†Ä<big><big>‚Üª</big></big>‚†Ä", UI_BUTTON_COLOR); GP.BUTTON_MINI_LINK("/", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", UI_BUTTON_COLOR););
  }
  else {
    GP.SPAN("<big><b>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏...</b></big>", GP_CENTER, "syncUpdate", UI_INFO_COLOR); //–æ–ø–∏—Å–∞–Ω–∏–µ
    GP.SPAN("<small>–ù–µ –≤—ã–∫–ª—é—á–∞–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!</small>", GP_CENTER, "syncWarn", GP_RED); //–æ–ø–∏—Å–∞–Ω–∏–µ
    GP.HR(UI_LINE_COLOR);
    M_BOX(GP_CENTER, GP.BUTTON_MINI_LINK("/", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", UI_BUTTON_COLOR););
    GP.UPDATE("syncUpdate,syncWarn");
    setUpdateCompleted();
  }
  GP.BLOCK_END();

  GP_BUILD_END();
}

void action() {
  if (ui.click()) {
    if (ui.clickSub("ext")) {
      if (ui.clickSub("extSendDel")) {
        for (uint8_t multiNum = constrain(ui.clickNameSub(1).toInt(), 0, (MAX_CLOCK - 1)); multiNum < (MAX_CLOCK - 1); multiNum++) {
          settings.send[multiNum] = settings.send[multiNum + 1]; //—Å–º–µ—â–∞–µ–º –∞–¥—Ä–µ—Å–∞
          settings.attempt[multiNum] = settings.attempt[multiNum + 1]; //—Å–º–µ—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        }
        settings.send[MAX_CLOCK - 1] = IPAddress(0, 0, 0, 0); //—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        settings.attempt[MAX_CLOCK - 1] = 1; //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        memory.update(); //–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
      }
      if (ui.click("extSendAdd")) {
        if (buffSendIp[0] != '\0') { //–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
          IPAddress _send_ip; //ip –∞–¥—Ä–µ—Å –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
          if (_send_ip.fromString(buffSendIp)) { //–µ—Å–ª–∏ –∞–¥—Ä–µ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π
            if (WiFi.localIP() != _send_ip) { //–µ—Å–ª–∏ –Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
              for (uint8_t i = 0; i < MAX_CLOCK; i++) {
                if (!settings.send[i]) { //–µ—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
                  sendHostNum = i; //—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–µ–∫—É—â–∏–π —Ö–æ—Å—Ç
                  settings.send[i] = _send_ip; //–∫–æ–ø–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
                  settings.attempt[i] = constrain(buffSendAttempt, 1, 5); //–∫–æ–ø–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                  memory.update(); //–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
                  break;
                }
                else if (settings.send[i] == _send_ip) break;
              }
            }
          }
        }
      }

      if (ui.click("extSendIp")) {
        strncpy(buffSendIp, ui.getString("extSendIp").c_str(), 20); //–∫–æ–ø–∏—Ä—É–µ–º —Å–µ–±–µ
        buffSendIp[19] = '\0'; //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
      }
      if (ui.click("extSendAttempt")) {
        buffSendAttempt = constrain(ui.getInt("extSendAttempt"), 1, 5); //–∫–æ–ø–∏—Ä—É–µ–º —Å–µ–±–µ
      }

      if (ui.click("extClear")) {
        settings.ssid[0] = '\0'; //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
        settings.pass[0] = '\0'; //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
        memory.update(); //–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
      }
      if (ui.click("extScan")) {
        if (wifiGetScanAllowStatus()) wifiStartScanNetworks(); //–Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫
      }

      if (ui.click("extPeriod")) {
        settings.period = ui.getInt("extPeriod");
        memory.update(); //–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
      }
    }
  }
  /**************************************************************************/
  if (ui.form()) {
    if (!wifiGetConnectWaitStatus() && !wifiGetConnectStatus()) {
      if (ui.form("/connection")) {
        if (!ui.copyStr("wifiSsid", settings.ssid, 64)) { //–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏
          int network = 0; //–Ω–æ–º–µ—Ä —Å–µ—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
          if (ui.copyInt("wifiNetwork", network)) {
            strncpy(settings.ssid, WiFi.SSID(network).c_str(), 64); //–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            settings.ssid[63] = '\0'; //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
          }
        }
        ui.copyStr("wifiPass", settings.pass, 64); //–∫–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å–µ—Ç–∏
        settings.pass[63] = '\0'; //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
        wifiSetConnectStatus(); //–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏
        memory.update(); //–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
      }
    }
    else if (ui.form("/network")) {
      wifiResetConnectStatus(); //–æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
      settings.ssid[0] = '\0'; //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
      settings.pass[0] = '\0'; //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
      memory.update(); //–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
    }
  }
  /**************************************************************************/
  if (ui.update()) {
    if (ui.updateSub("sync")) {
      if (ui.update("syncNetwork")) { //–µ—Å–ª–∏ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        ui.answer(wifiGetConnectState());
      }
      if (ui.update("syncReload") && wifiGetScanCompleteStatus()) { //–µ—Å–ª–∏ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        ui.answer(1);
        wifiResetScanCompleteStatus();
      }
    }
    //--------------------------------------------------------------------
    if (ui.updateSub("bar")) {
      if (ui.update("barBat")) { //–µ—Å–ª–∏ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        ui.answer(getBatteryState());
      }

      if (ui.update("barTemp")) { //–µ—Å–ª–∏ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        ui.answer(String(sens.temp / 10.0, 1) + "¬∞–°");
      }
      if (ui.update("barHum")) { //–µ—Å–ª–∏ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        ui.answer(String(sens.hum) + "%");
      }
      if (ui.update("barPress")) { //–µ—Å–ª–∏ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        ui.answer(String(sens.press) + "mm.Hg");
      }

      if (ui.update("bar_wifi")) { //–µ—Å–ª–∏ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        ui.answer(getWiFiSignal());
      }
    }
  }
}
//---------------------------–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏---------------------------------
float getBatteryVoltage(void) { //–ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏
  return (vccVoltage / 1000.0);
}
//---------------------------–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏----------------------------------
uint8_t getBatteryCharge(void) { //–ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏
  if (vccVoltage <= BAT_VOLTAGE_MIN) return 0;
  return constrain((uint8_t)(((vccVoltage - BAT_VOLTAGE_MIN) / ((BAT_VOLTAGE_MAX - BAT_VOLTAGE_MIN) / 20.0)) + 1) * 5, 5, 100);
}
//---------------------------–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏----------------------------------
String getBatteryState(void) { //–ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏
  String data = "üîã ";
  data += getBatteryCharge();
  data += '%';
  return data;
}
//---------------------------–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏----------------------------------
uint8_t getWiFiSignal(void) { //–ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏
  return constrain(2 * (WiFi.RSSI() + 100), 0, 100);
}
//--------------------------------------------------------------------
String getTimeFromMs(uint32_t data) {
  data /= 1000;

  uint8_t second = data % 60;
  data /= 60;
  uint8_t minute = data % 60;
  data /= 60;
  uint16_t hour = data % 24;
  data /= 24;

  String str = "";

  str += data;
  str += ':';
  str += hour;
  str += ':';
  str += minute / 10;
  str += minute % 10;
  str += ':';
  str += second / 10;
  str += second % 10;

  return str;
}
//--------------------------------------------------------------------
char getHexChar(uint8_t hex) {
  if (hex > 15) return 'F';
  if (hex > 9) return ('A' + (hex - 10));
  return ('0' + hex);
}
//--------------------------------------------------------------------
String getSensorId(void) {
  String str;
  str.reserve(20);
  str = "";

  uint8_t mac[6];
  efuseGetDefaultMacAddress(mac);

  for (uint8_t i = 0; i < 6; i++) {
    str += getHexChar(mac[i] >> 4);
    str += getHexChar(mac[i] & 0x0F);
    if (i < 5) str += ':';
  }

  return str;
}
//--------------------------------------------------------------------
String strLengthConstrain(String data, uint8_t size) {
  if (data.length() > size) {
    data.remove(size);
    data += "‚Ä¶";
  }
  return data;
}
//--------------------------------------------------------------------
void efuseGetDefaultMacAddress(uint8_t* mac) {
  uint32_t _efuse_low = REG_READ(0x3FF00050);
  uint32_t _efuse_mid = REG_READ(0x3FF00054);
  uint32_t _efuse_high = REG_READ(0x3FF0005C);

  mac[0] = _efuse_high >> 16;
  mac[1] = _efuse_high >> 8;
  mac[2] = _efuse_high;
  mac[3] = _efuse_mid >> 8;
  mac[4] = _efuse_mid;
  mac[5] = _efuse_low >> 24;
}
//--------------------------------------------------------------------
void checkCRC(uint8_t* crc, uint8_t data) { //—Å–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
  for (uint8_t i = 0; i < 8; i++) { //—Å—á–∏—Ç–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –±–∏—Ç
    *crc = ((*crc ^ data) & 0x01) ? (*crc >> 0x01) ^ 0x8C : (*crc >> 0x01); //—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    data >>= 0x01; //—Å–¥–≤–∏–≥–∞–µ–º –±—É—Ñ–µ—Ä
  }
}
//--------------------------------------------------------------------
void checkSettingsButton(void) {
  if (ESP.rtcUserMemoryRead(32, rtcMemory, sizeof(rtcMemory))) {
    if ((rtcMemory[0] ^ rtcMemory[1]) != 0xFFFFFFFF) {
      rtcMemory[0] = 0; //—Å–±—Ä–æ—Å–∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
      rtcMemory[1] = 0xFFFFFFFF; //—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
      rtcMemory[2] = 0x00; //—Å–±—Ä–æ—Å–∏–ª–∏ –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ wifi
      rtcMemory[3] = 0x00; //—Å–±—Ä–æ—Å–∏–ª–∏ –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ wifi
      rtcMemory[4] = 0x00; //—Å–±—Ä–æ—Å–∏–ª–∏ –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ dhcp
      rtcMemory[5] = 0x00; //—Å–±—Ä–æ—Å–∏–ª–∏ –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ dhcp
      rtcMemory[6] = 0x00; //—Å–±—Ä–æ—Å–∏–ª–∏ –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ dhcp
      rtcMemory[7] = 0x00; //—Å–±—Ä–æ—Å–∏–ª–∏ –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ dns
      rtcMemory[8] = 0x00; //—Å–±—Ä–æ—Å–∏–ª–∏ –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ dns

      sensorStartWait = 2;
#if DEBUG_MODE
      Serial.println F("Settings button reset!");
#endif
    }
    else if (rtcMemory[0] < 64) {
      rtcMemory[0]++; //–¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
      rtcMemory[1] = rtcMemory[0] ^ 0xFFFFFFFF; //—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
#if DEBUG_MODE
      Serial.print F("Settings button click ");
      Serial.print(rtcMemory[0]);
      Serial.println F("...");
#endif
    }
    if (rtcMemory[0] >= 3) { //–µ—Å–ª–∏ –±—ã–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π
      rtcMemory[0] = 0; //—Å–±—Ä–æ—Å–∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
      rtcMemory[1] = 0xFFFFFFFF; //—Å–±—Ä–æ—Å–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
      settingsMode = true; //–≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
#if DEBUG_MODE
      Serial.println F("Settings mode enable...");
#endif
    }
  }
  if (ESP.rtcUserMemoryWrite(32, rtcMemory, sizeof(rtcMemory))) {
#if DEBUG_MODE
    Serial.println F("Settings button update!");
#endif
  }
}
//--------------------------------------------------------------------
void resetSettingsButton(void) {
  if (rtcMemory[0]) { //–µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
    rtcMemory[0] = 0; //—Å–±—Ä–æ—Å–∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    rtcMemory[1] = 0xFFFFFFFF; //—Å–±—Ä–æ—Å–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
    if (ESP.rtcUserMemoryWrite(32, rtcMemory, sizeof(rtcMemory))) {
#if DEBUG_MODE
      Serial.println F("Settings button reset!");
#endif
    }
  }
}
//--------------------------------------------------------------------
void setUpdateCompleted(void) {
  rtcMemory[0] = 64; //—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  rtcMemory[1] = rtcMemory[0] ^ 0xFFFFFFFF; //—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
  if (ESP.rtcUserMemoryWrite(32, rtcMemory, sizeof(rtcMemory))) {
#if DEBUG_MODE
    Serial.println F("Firmware mark update!");
#endif
  }
}
//--------------------------------------------------------------------
void sleepMode(void) {
#if DEBUG_MODE
  Serial.print F("Sleep mode, wake after ");
  Serial.print(sleepTime[settings.period]);
  Serial.println F(" min...");
#endif
#if STATUS_LED > 0
  if (settingsMode == true) digitalWrite(LED_BUILTIN, HIGH); //–≤—ã–∫–ª—é—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é
#endif

  ui.stop(); //–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ui
  udp.stop(); //–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å udp

  WiFi.disconnect(); //–æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ç–∏
  WiFi.mode(WIFI_OFF); //–æ—Ç–∫–ª—é—á–∞–µ–º wifi

#if SLEEP_MODE
  ESP.deepSleep((60e6 * sleepTime[settings.period]) - (millis() * 1000)); //—É—Ö–æ–¥–∏–º –≤ —Å–æ–Ω
#else
  WiFi.forceSleepBegin(); //–≤—ã–∫–ª—é—á–∞–µ–º –ø–∏—Ç–∞–Ω–∏–µ wifi
  delay((60e3 * sleepTime[settings.period]) - millis()); //–∂–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–Ω–∞
  ESP.restart(); //–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
#endif
}
//--------------------------------------------------------------------
void lowBattery(void) {
#if DEBUG_MODE
  Serial.println F("Battery low, power down...");
#endif
#if STATUS_LED > 0
  for (uint8_t i = 0; i < 5; i++) {
    digitalWrite(LED_BUILTIN, (boolean)(i & 0x01));
    delay(200);
  }
  digitalWrite(LED_BUILTIN, HIGH);
#endif
  resetSettingsButton(); //—Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  ESP.deepSleep(0); //—É—Ö–æ–¥–∏–º –≤ —Å–æ–Ω
}
//--------------------------------------------------------------------
void checkBattery(void) {
  vccVoltage = ESP.getVcc();
  if (vccVoltage > BAT_VOLTAGE_CORRECT) vccVoltage -= BAT_VOLTAGE_CORRECT;
  if (!getBatteryCharge()) lowBattery();
}
//--------------------------------------------------------------------
void checkSettings(void) {
  if (settings.ssid[0] == '\0') {
    delay(1000);
    resetSettingsButton(); //—Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
#if DEBUG_MODE
    Serial.println F("Wifi is not configured, power down...");
#endif
#if STATUS_LED > 0
    for (uint8_t i = 0; i < 3; i++) {
      digitalWrite(LED_BUILTIN, (boolean)(i & 0x01));
      delay(500);
    }
    digitalWrite(LED_BUILTIN, HIGH);
#endif
    ESP.deepSleep(0); //—É—Ö–æ–¥–∏–º –≤ —Å–æ–Ω
  }
}
//--------------------------------------------------------------------
void checkSensors(void) {
#if DEBUG_MODE
  Serial.println F("Sensor check start...");
#endif

  if (settingsMode == true) settings.sensor = 0; //—Å–±—Ä–æ—Å–∏–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä—ã

  sens.temp = 0x7FFF; //—Å–±—Ä–æ—Å–∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
  sens.press = 0; //—Å–±—Ä–æ—Å–∏–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ
  sens.hum = 0; //—Å–±—Ä–æ—Å–∏–ª–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å

  sensorReady = false; //—Å–±—Ä–æ—Å–∏–ª–∏ —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Ä–∞

  if (!settings.sensor) {
    if (!readTempDHT()) {
      if (!readTempDS()) {
        readTempBME();
        twi_write_stop(); //–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —à–∏–Ω—É
        readTempSHT();
        twi_write_stop(); //–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —à–∏–Ω—É
        readTempAHT();
        twi_write_stop(); //–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —à–∏–Ω—É
      }
    }
    if (settings.sensor) {
      memory.updateNow(); //–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
#if DEBUG_MODE
      Serial.println F("Sensor found, update memory...");
#endif
    }
    else {
#if DEBUG_MODE
      Serial.print F("Sensor not found");
#endif
      if (settingsMode == true) {
        memory.update(); //–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
#if DEBUG_MODE
        Serial.println F(", update memory...");
#endif
      }
#if DEBUG_MODE
      else Serial.println F("!");
#endif
    }
  }
  else {
    for (uint8_t sensor = 0; sensor < SENS_MAX; sensor++) {
      if (settings.sensor & (0x01 << sensor)) {
        switch (sensor) {
          case SENS_DHT: readTempDHT(); return;
          case SENS_DS: readTempDS(); return;
          case SENS_BME: readTempBME(); twi_write_stop(); break;
          case SENS_SHT: readTempSHT(); twi_write_stop(); break;
          case SENS_AHT: readTempAHT(); twi_write_stop(); break;
        }
      }
    }
  }
}
//--------------------------------------------------------------------
void updateSensors(void) {
  updateTempDS(); //–∑–∞–±—Ä–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É DS18B20

  if (sens.temp != 0x7FFF) { //–µ—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (sens.temp > 850) sens.temp = 850; //–µ—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª
    if (sens.temp < -850) sens.temp = -850; //–µ—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª
  }
  if (sens.hum > 99) sens.hum = 99; //–µ—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª

  sensorReady = true; //—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Ä–∞

#if DEBUG_MODE
  Serial.println F("Sensor check end...");
#endif
}
//--------------------------------------------------------------------
void updateBuffer(void) {
  boolean _init = false; //—Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

  if (_init != true) { //–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã
    _init = true; //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

    efuseGetDefaultMacAddress(buffSendData); //–ø–æ–ª—É—á–∏—Ç—å mac –∞–¥—Ä–µ—Å

    if (settingsMode == true) buffSendData[6] = UDP_FOUND_CMD;
    else if (settings.send[0]) buffSendData[6] = UDP_ANSWER_CMD;
    else buffSendData[6] = UDP_WRITE_CMD;

    buffSendData[7] = (uint8_t)sens.temp;
    buffSendData[8] = (uint8_t)(sens.temp >> 8);

    buffSendData[9] = (uint8_t)sens.press;
    buffSendData[10] = (uint8_t)(sens.press >> 8);

    buffSendData[11] = (uint8_t)sens.hum;

    buffSendData[12] = (uint8_t)getBatteryCharge();
    buffSendData[13] = (uint8_t)getWiFiSignal();
    buffSendData[14] = (uint8_t)sleepTime[settings.period];

    uint8_t crc = 0;
    for (uint8_t i = 0; i < (UDP_SEND_SIZE - 1); i++) checkCRC(&crc, buffSendData[i]);

    buffSendData[15] = (uint8_t)crc;

#if DEBUG_MODE
    Serial.println F("Send buffer update...");
#endif
  }
}
//--------------------------------------------------------------------
boolean sendCheck(void) {
  if (sendAnswerWait) {
    if (udp.parsePacket() == UDP_ANSWER_SIZE) {
      if (udp.remotePort() == UDP_CLOCK_PORT) {
        if (udp.remoteIP() == settings.send[sendHostNum]) {
          if (udp.read() == UDP_ANSWER_CMD) {
#if DEBUG_MODE
            Serial.println F("Send answer ok...");
#endif
            sendHostAttempt = 0;
            sendHostNum++;
          }
#if DEBUG_MODE
          else {
            Serial.println F("Send answer error!");
          }
#endif
          sendAnswerWait = false;
        }
      }
    }
    else if ((millis() - sendAnswerTimer) >= UDP_ANSWER_WAIT_TIME) {
#if DEBUG_MODE
      Serial.println F("Send answer timeout!");
#endif
      sendAnswerWait = false;
    }
  }
  return !sendAnswerWait;
}
//--------------------------------------------------------------------
void sendReset(void) {
#if DEBUG_MODE
  Serial.println F("Send wait answer...");
#endif
  udp.flush();
  sendAnswerWait = true;
  sendAnswerTimer = millis();
}
//--------------------------------------------------------------------
void sendUpdate(void) {
  if (wifiGetConnectStatus() && pingCheck() && sendCheck() && (sensorReady == true)) {
    if (sendHostNum < MAX_CLOCK) {
      if (settings.send[sendHostNum] || !sendHostNum) {
        updateBuffer(); //–æ–±–Ω–æ–≤–∏—Ç—å –±—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏
#if DEBUG_MODE
        Serial.print F("Send package to IP address: ");
        if (settings.send[sendHostNum]) {
          IPAddress addr = settings.send[sendHostNum];
          Serial.println(addr.toString());
        }
        else Serial.println(wifiGetBroadcastIP().toString());
#endif
        if (!udp.beginPacket((settings.send[sendHostNum]) ? settings.send[sendHostNum] : wifiGetBroadcastIP(), UDP_CLOCK_PORT) || (udp.write(buffSendData, UDP_SEND_SIZE) != UDP_SEND_SIZE) || !udp.endPacket()) {
#if DEBUG_MODE
          Serial.println F("Send package fail!");
#endif
        }
#if DEBUG_MODE
        else {
          Serial.println F("Send package ok...");
        }
#endif
        if (buffSendData[6] == UDP_ANSWER_CMD) {
          if (++sendHostAttempt >= settings.attempt[sendHostNum]) {
            sendHostAttempt = 0;
            sendHostNum++;
          }
          sendReset();
        }
        else sendHostNum++;
      }
      else {
        sendHostNum = MAX_CLOCK;
        if (buffSendData[6] != UDP_ANSWER_CMD) pingReset();
#if DEBUG_MODE
        Serial.println F("Send all packages completed...");
#endif
      }
    }
    else if (settingsMode == false) sleepMode(); //–æ—Ç–∫–ª—é—á–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ
  }
}
//--------------------------------------------------------------------
void timeUpdate(void) {
  static uint8_t updateTimer = 0;
  static uint32_t secondsTimer = 0;

  if (!secondsTimer || ((millis() - secondsTimer) >= 1000)) {
    secondsTimer = millis();

    if (updateTimer == sensorStartWait) checkSensors(); //–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤
    else if (updateTimer == (sensorStartWait + 1)) updateSensors(); //–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤
    else if ((updateTimer > (SETTINGS_MODE_TIME - 15)) && (settingsMode == true) && ui.online()) updateTimer = (SETTINGS_MODE_TIME - 15); //—Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä
    else if (updateTimer > ((settingsMode == false) ? 15 : SETTINGS_MODE_TIME)) sleepMode(); //–æ—Ç–∫–ª—é—á–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ

    if (updateTimer < 255) updateTimer++; //–ø—Ä–∏–±–∞–≤–∏–ª–∏ —Ç–∞–π–º–µ—Ä —Å–µ–∫—É–Ω–¥

    if (updateTimer > 1) {
      resetSettingsButton(); //—Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
#if STATUS_LED > 0
      if ((settingsMode == true) && wifiGetConnectWaitStatus()) digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN)); //–º–∏–≥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
#endif
    }
  }
}
//--------------------------------------------------------------------
void setup() {
  //–≤—ã–∫–ª—é—á–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ wifi
  WiFi.forceSleepBegin();

  //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
#if STATUS_LED > 0
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);
#endif

  //–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è
  checkBattery();

#if DEBUG_MODE
  Serial.begin(115200);
  Serial.println F("");
  Serial.println F("Startup...");
  Serial.print F("Supply voltage ");
  Serial.print(getBatteryVoltage(), 2);
  Serial.println F("...");
  Serial.print F("Firmware version ");
  Serial.print F(ESP_FIRMWARE_VERSION);
  Serial.println F("...");
#endif

  //–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  checkSettingsButton();

  //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
#if STATUS_LED > 0
  if (settingsMode == true) digitalWrite(LED_BUILTIN, LOW);
#endif

  //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏–Ω—ã
  pinMode(TWI_SDA_PIN, INPUT_PULLUP);
  pinMode(TWI_SCL_PIN, INPUT_PULLUP);
  twi_init();

  //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ OTA
  if (settingsMode == true) {
    if ((getBatteryCharge() < 50) || (ESP.getFreeSketchSpace() < ESP.getSketchSize())) {
      otaUpdate = false; //–≤—ã–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
#if DEBUG_MODE
      Serial.println F("OTA update disable...");
#endif
    }
#if DEBUG_MODE
    else Serial.println F("OTA update enable...");
#endif
  }

  //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  settings.period = SEND_DATA_PERIOD;

  //—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  for (uint8_t i = 0; i < MAX_CLOCK; i++) {
    settings.send[i] = IPAddress(0, 0, 0, 0);
    settings.attempt[i] = 1;
  }

  //—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏
  settings.ssid[0] = '\0';
  settings.pass[0] = '\0';

  //—á–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏
  EEPROM.begin(memory.blockSize());
  memory.begin(0, 0xAD);

  //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏
  if (settingsMode == false) checkSettings();

  //–ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  if (settingsMode == true) {
    ui.attachBuild(build);
    ui.attach(action);
    ui.start();

    //–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ä–æ–ª—è
    if (otaUpdate) {
      ui.enableOTA();
      ui.OTA.attachUpdateBuild(buildUpdater);
    }
    ui.downloadAuto(true);
    ui.uploadAuto(false);
  }

  //–≤–∫–ª—é—á–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ wifi
  WiFi.forceSleepWake();

  //–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º wifi
  WiFi.persistent(false);
  if (WiFi.getAutoConnect() != false) WiFi.setAutoConnect(false);
  if (WiFi.getAutoReconnect() != false) WiFi.setAutoReconnect(false);
  if (settingsMode == true) wifiStartAP();
  else WiFi.mode(WIFI_STA);
}
//--------------------------------------------------------------------
void loop() {
  if (wifiUpdate()) sleepMode(); //–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ wifi

  timeUpdate(); //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
  sendUpdate(); //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ —Å–≤—è–∑–∏

  if (settingsMode == true) {
    ui.tick(); //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    memory.tick(); //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ–µ–ø—Ä–æ–º
  }
}
